{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Louis\\\\Desktop\\\\demoviewer\\\\client\\\\src\\\\pages\\\\WatchPage.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Button, Jumbotron, Container, Col, Row, Pagination } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './WatchPage.css';\nimport json from './123.json';\n\nfunction PlaybackArea(props) {\n  const drawDots = props.dotPositions.map(position => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dot\",\n      style: {\n        \"left\": position.x,\n        \"bottom\": position.y\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 16\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, drawDots);\n}\n\nfunction ControlBar(props) {\n  let active = 1;\n  let items = [];\n\n  function handleClick(id, e) {\n    active = id;\n    props.onClick(id);\n  } // Displaying pagination numbers\n\n\n  for (let number = 1; number <= props.maxRounds; number++) {\n    items.push( /*#__PURE__*/React.createElement(Pagination.Item, {\n      key: number,\n      active: number === active,\n      onClick: handleClick.bind,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, number));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, items));\n}\n\nfunction Game(props) {\n  const [hist, setHist] = useState({\n    t: 0,\n    dotPositions: []\n  });\n  const [currentRound, setCurrentRound] = useState(1); // For position calibration\n\n  const x0 = 535,\n        y0 = -527;\n  const xg0 = -520,\n        yg0 = -984;\n  const k = 0.2;\n  useInterval(() => {\n    if (props.game != null && hist.t < props.game.rounds[currentRound].player_positions.length) {\n      let players = props.game.rounds[currentRound].player_positions[hist.t].players;\n      let newHist = {\n        t: hist.t + 1,\n        dotPositions: []\n      };\n\n      for (const i in players) {\n        if (players[i].position != null) {\n          // checks if player is still alive\n          let xg = players[i].position.x;\n          let yg = players[i].position.y;\n          let x = x0 + (xg - xg0) * k;\n          let y = y0 + (yg - yg0) * k;\n          newHist.dotPositions.push({\n            x,\n            y\n          });\n        }\n      }\n\n      setHist(newHist);\n    }\n\n    console.log(\"tick\");\n  }, 5);\n\n  function onClick(i) {\n    setCurrentRound(i);\n    alert(\"current round: \" + i);\n  }\n\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PlaybackArea, {\n    dotPositions: hist.dotPositions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ControlBar, {\n    maxRounds: Object.keys(props.game.rounds).length,\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }));\n}\n\nfunction WatchPage(props) {\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Game, {\n    game: json,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }));\n} //~~~~~~~~~~~~~~~~~\n\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default WatchPage;","map":{"version":3,"sources":["C:/Users/Louis/Desktop/demoviewer/client/src/pages/WatchPage.js"],"names":["React","useEffect","useRef","useState","Button","Jumbotron","Container","Col","Row","Pagination","json","PlaybackArea","props","drawDots","dotPositions","map","position","x","y","ControlBar","active","items","handleClick","id","e","onClick","number","maxRounds","push","bind","Game","hist","setHist","t","currentRound","setCurrentRound","x0","y0","xg0","yg0","k","useInterval","game","rounds","player_positions","length","players","newHist","i","xg","yg","console","log","alert","Object","keys","WatchPage","callback","delay","savedCallback","current","tick","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport { Button, Jumbotron, Container, Col, Row, Pagination} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './WatchPage.css';\r\nimport json from './123.json';\r\n\r\n\r\n\r\nfunction PlaybackArea(props){\r\n    const drawDots = props.dotPositions.map(position=>{\r\n        return <div class =\"dot\" style = {{\"left\": position.x, \"bottom\": position.y}}/>\r\n    });\r\n        \r\n    return(\r\n        <div id=\"map\">\r\n            {drawDots}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ControlBar(props){\r\n    let active = 1;\r\n    let items = [];\r\n\r\n    function handleClick(id, e){\r\n        active = id;\r\n        props.onClick(id);\r\n    }\r\n\r\n    // Displaying pagination numbers\r\n    for (let number = 1; number <= props.maxRounds; number++) {\r\n        items.push(\r\n          <Pagination.Item key={number} active={number === active} onClick={handleClick.bind}>\r\n            {number}\r\n          </Pagination.Item>,\r\n        );\r\n      }\r\n\r\n    return(\r\n        <div>\r\n          <Pagination>{items}</Pagination>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction Game(props){\r\n    const [hist, setHist] = useState({t:0, dotPositions:[]});\r\n    const [currentRound, setCurrentRound] = useState(1);\r\n\r\n    // For position calibration\r\n    const x0 = 535, y0 = -527;   \r\n    const xg0 = -520, yg0 = -984;\r\n    const k = 0.2;\r\n\r\n    useInterval(()=>{\r\n        if(props.game != null && hist.t < props.game.rounds[currentRound].player_positions.length){\r\n            let players = props.game.rounds[currentRound].player_positions[hist.t].players;\r\n\r\n            let newHist = {\r\n                t: hist.t + 1,\r\n                dotPositions: []\r\n            }\r\n            \r\n            for(const i in players){\r\n                if(players[i].position != null){     // checks if player is still alive\r\n                    let xg = players[i].position.x;\r\n                    let yg = players[i].position.y;\r\n                    let x = x0 + (xg-xg0)*k;\r\n                    let y = y0 + (yg-yg0)*k;\r\n\r\n                    newHist.dotPositions.push({x,y});\r\n                }\r\n            }\r\n\r\n            setHist(newHist);\r\n        }\r\n        console.log(\"tick\");   \r\n    },5);\r\n\r\n    function onClick(i){\r\n        setCurrentRound(i);\r\n        alert(\"current round: \" + i)\r\n    }\r\n\r\n    return(\r\n        <Jumbotron>\r\n            <PlaybackArea dotPositions= {hist.dotPositions}/>\r\n            <ControlBar maxRounds = {Object.keys(props.game.rounds).length} onClick = {onClick}/>\r\n        </Jumbotron>\r\n    );\r\n   \r\n}\r\n\r\nfunction WatchPage(props){\r\n    return(\r\n        <Container>\r\n            <Game game={json}/>\r\n        </Container>\r\n    )\r\n}\r\n\r\n//~~~~~~~~~~~~~~~~~\r\n\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  }\r\n\r\nexport default WatchPage;\r\n"]},"metadata":{},"sourceType":"module"}