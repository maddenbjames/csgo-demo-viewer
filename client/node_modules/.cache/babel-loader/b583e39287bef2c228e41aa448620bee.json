{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Louis\\\\Desktop\\\\demoviewer\\\\csgo-demo-viewer\\\\client\\\\src\\\\pages\\\\WatchPage.js\";\nimport React, { useEffect, useRef, useState, useContext } from 'react';\nimport { Jumbotron, Container, Pagination, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './WatchPage.css';\nimport { SocketContext } from \"../contexts/SocketProvider\";\nimport { GameContext } from \"../contexts/GameProvider\";\n\nfunction PlaybackArea(props) {\n  const drawDots = props.dotPositions.map(position => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dot\",\n      style: {\n        \"left\": position.x,\n        \"bottom\": position.y\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 16\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, drawDots);\n}\n\nconst ControlBar = React.memo(function ControlBar(props) {\n  const [active, setActive] = useState(props.currentRound);\n  let items = [];\n  useEffect(() => {\n    setActive(props.currentRound);\n  }, [props.currentRound]); // Displaying pagination numbers\n\n  for (let number = 1; number <= props.maxRounds; number++) {\n    items.push( /*#__PURE__*/React.createElement(Pagination.Item, {\n      key: number,\n      active: number === active,\n      onClick: () => props.changeRound(number),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, number));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, items), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: props.pauseUnpause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, props.paused ? \"Play\" : \"Pause\"), ' ');\n});\n\nfunction Game(props) {\n  const game = useContext(GameContext).game;\n  const socket = useContext(SocketContext);\n  const [dotPositions, setDotPositions] = useState([]);\n  const [playbackState, setPlaybackState] = useState({\n    currentRound: 1,\n    t: 0,\n    paused: true\n  }); //console.log(\"init\");\n\n  useInterval(() => {\n    // For position calibration\n    const x0 = 535,\n          y0 = -527;\n    const xg0 = -520,\n          yg0 = -984;\n    const k = 0.2;\n\n    if (!playbackState.paused && game != null && playbackState.t < game.rounds[playbackState.currentRound].player_positions.length) {\n      let players = game.rounds[playbackState.currentRound].player_positions[playbackState.t].players;\n      let newDotPositions = [];\n\n      for (const i in players) {\n        if (players[i].position != null) {\n          // checks if player is still alive\n          let xg = players[i].position.x;\n          let yg = players[i].position.y;\n          let x = x0 + (xg - xg0) * k;\n          let y = y0 + (yg - yg0) * k;\n          newDotPositions.push({\n            x,\n            y\n          });\n        }\n      }\n\n      setDotPositions(newDotPositions);\n      setPlaybackState({\n        currentRound: playbackState.currentRound,\n        t: playbackState.t + 1,\n        paused: playbackState.paused\n      });\n    } //console.log(\"tick\");   \n\n  }, 5);\n  useEffect(() => {\n    socket.on(\"update\", state => {\n      setPlaybackState(state);\n      console.log(state);\n    });\n  }, []);\n\n  function changeRound(i) {\n    setDotPositions([]);\n    setPlaybackState({\n      currentRound: i,\n      t: 0,\n      paused: playbackState.paused\n    });\n    socket.emit(\"playbackUpdate\", {\n      currentRound: i,\n      t: 0,\n      paused: true\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PlaybackArea, {\n    dotPositions: dotPositions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ControlBar, {\n    maxRounds: game == null ? 30 : Object.keys(game.rounds).length,\n    changeRound: changeRound,\n    pauseUnpause: () => setPlaybackState({\n      paused: playbackState.paused ? false : true\n    }),\n    currentRound: playbackState.currentRound,\n    paused: playbackState.paused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }));\n}\n\nfunction WatchPage() {\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Game, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }));\n} //~~~~~~~~~~~~~~~~~\n\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default WatchPage;","map":{"version":3,"sources":["C:/Users/Louis/Desktop/demoviewer/csgo-demo-viewer/client/src/pages/WatchPage.js"],"names":["React","useEffect","useRef","useState","useContext","Jumbotron","Container","Pagination","Button","SocketContext","GameContext","PlaybackArea","props","drawDots","dotPositions","map","position","x","y","ControlBar","memo","active","setActive","currentRound","items","number","maxRounds","push","changeRound","pauseUnpause","paused","Game","game","socket","setDotPositions","playbackState","setPlaybackState","t","useInterval","x0","y0","xg0","yg0","k","rounds","player_positions","length","players","newDotPositions","i","xg","yg","on","state","console","log","emit","Object","keys","WatchPage","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState, useContext} from 'react';\r\nimport {Jumbotron, Container, Pagination, Button} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './WatchPage.css';\r\nimport {SocketContext} from \"../contexts/SocketProvider\";\r\nimport {GameContext} from \"../contexts/GameProvider\";\r\n\r\n\r\nfunction PlaybackArea(props){\r\n    const drawDots = props.dotPositions.map(position=>{\r\n        return <div class =\"dot\" style = {{\"left\": position.x, \"bottom\": position.y}}/>\r\n    });\r\n        \r\n    return(\r\n        <div id=\"map\">\r\n            {drawDots}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ControlBar = React.memo(function ControlBar(props){\r\n    const [active, setActive] = useState(props.currentRound);\r\n    let items = [];\r\n\r\n    useEffect(()=>{\r\n        setActive(props.currentRound);\r\n    },[props.currentRound]);\r\n\r\n\r\n    // Displaying pagination numbers\r\n    for (let number = 1; number <= props.maxRounds; number++) {\r\n        items.push(\r\n          <Pagination.Item key={number} active={number === active} onClick={()=>props.changeRound(number)}>\r\n            {number}\r\n          </Pagination.Item>,\r\n        );\r\n      }\r\n\r\n    return(\r\n        <div>\r\n          <Pagination>{items}</Pagination>\r\n          <Button variant=\"primary\" onClick = {props.pauseUnpause}>{props.paused? \"Play\": \"Pause\"}</Button>{' '}\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\nfunction Game(props){\r\n    const game = useContext(GameContext).game;\r\n    const socket = useContext(SocketContext);\r\n    const [dotPositions, setDotPositions] = useState([]);\r\n    const [playbackState, setPlaybackState] = useState({\r\n        currentRound: 1,\r\n        t: 0,\r\n        paused: true\r\n    });\r\n\r\n    //console.log(\"init\");\r\n    \r\n    \r\n    useInterval(()=>{\r\n        // For position calibration\r\n        const x0 = 535, y0 = -527;   \r\n        const xg0 = -520, yg0 = -984;\r\n        const k = 0.2;\r\n\r\n        if(!playbackState.paused && game != null && playbackState.t < game.rounds[playbackState.currentRound].player_positions.length){\r\n            let players = game.rounds[playbackState.currentRound].player_positions[playbackState.t].players;\r\n\r\n            let newDotPositions = [];\r\n            \r\n            for(const i in players){\r\n                if(players[i].position != null){     // checks if player is still alive\r\n                    let xg = players[i].position.x;\r\n                    let yg = players[i].position.y;\r\n                    let x = x0 + (xg-xg0)*k;\r\n                    let y = y0 + (yg-yg0)*k;\r\n\r\n                    newDotPositions.push({x,y});\r\n                }\r\n            }\r\n\r\n            setDotPositions(newDotPositions);\r\n            setPlaybackState({currentRound: playbackState.currentRound, t: playbackState.t+1, paused: playbackState.paused});\r\n        }\r\n        //console.log(\"tick\");   \r\n    },5);\r\n     \r\n\r\n    useEffect(()=>{\r\n        socket.on(\"update\", state =>{\r\n            setPlaybackState(state);\r\n\r\n            console.log(state);\r\n        });\r\n    },[]);\r\n\r\n    function changeRound(i){\r\n        setDotPositions([]);\r\n        setPlaybackState({currentRound: i, t:0, paused: playbackState.paused});\r\n\r\n        socket.emit(\"playbackUpdate\", {currentRound: i, t:0, paused: true});\r\n    }\r\n\r\n    return(\r\n        <Jumbotron>\r\n            <PlaybackArea dotPositions= {dotPositions}/>\r\n            <ControlBar \r\n                maxRounds = {game == null ? 30 : Object.keys(game.rounds).length} \r\n                changeRound = {changeRound} \r\n                pauseUnpause = {()=>setPlaybackState({paused: playbackState.paused ? false: true})}\r\n                currentRound = {playbackState.currentRound}\r\n                paused = {playbackState.paused}\r\n                />\r\n        </Jumbotron>\r\n    );\r\n\r\n}\r\n\r\nfunction WatchPage(){\r\n    return(\r\n        <Container>\r\n            <Game/>\r\n        </Container>\r\n    )\r\n}\r\n\r\n//~~~~~~~~~~~~~~~~~\r\n\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  }\r\n\r\nexport default WatchPage;\r\n"]},"metadata":{},"sourceType":"module"}