{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Louis\\\\Desktop\\\\demoviewer\\\\client\\\\src\\\\pages\\\\WatchPage.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from \"socket.io-client\";\nimport { Button, Jumbotron, Container, Pagination } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './WatchPage.css';\nimport json from './123.json';\n\nfunction PlaybackArea(props) {\n  const drawDots = props.dotPositions.map(position => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dot\",\n      style: {\n        \"left\": position.x,\n        \"bottom\": position.y\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 16\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, drawDots);\n}\n\nfunction ControlBar(props) {\n  const [active, setActive] = useState(1);\n  let items = [];\n\n  function handleClick(i) {\n    setActive(i);\n    props.onClick(i);\n  } // Displaying pagination numbers\n\n\n  for (let number = 1; number <= props.maxRounds; number++) {\n    items.push( /*#__PURE__*/React.createElement(Pagination.Item, {\n      key: number,\n      active: number === active,\n      onClick: () => handleClick(number),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }, number));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, items));\n}\n\nfunction Game(props) {\n  const [playbackState, setPlaybackState] = useState({\n    t: 0,\n    dotPositions: []\n  });\n  const [currentRound, setCurrentRound] = useState(1);\n  useEffect(() => {\n    const socket = io(props.endpoint);\n  });\n  useInterval(() => {\n    // For position calibration\n    const x0 = 535,\n          y0 = -527;\n    const xg0 = -520,\n          yg0 = -984;\n    const k = 0.2;\n\n    if (props.game != null && playbackState.t < props.game.rounds[currentRound].player_positions.length) {\n      let players = props.game.rounds[currentRound].player_positions[playbackState.t].players;\n      let newState = {\n        t: playbackState.t + 1,\n        dotPositions: []\n      };\n\n      for (const i in players) {\n        if (players[i].position != null) {\n          // checks if player is still alive\n          let xg = players[i].position.x;\n          let yg = players[i].position.y;\n          let x = x0 + (xg - xg0) * k;\n          let y = y0 + (yg - yg0) * k;\n          newState.dotPositions.push({\n            x,\n            y\n          });\n        }\n      }\n\n      setPlaybackState(newState);\n    }\n\n    console.log(\"tick\");\n  }, 5);\n\n  function handleClick(i) {\n    setCurrentRound(i);\n    setPlaybackState({\n      t: 0,\n      dotPositions: []\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PlaybackArea, {\n    dotPositions: playbackState.dotPositions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ControlBar, {\n    maxRounds: Object.keys(props.game.rounds).length,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }));\n}\n\nfunction WatchPage(props) {\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Game, {\n    game: json,\n    endpoint: props.endpoint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }));\n} //~~~~~~~~~~~~~~~~~\n\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default WatchPage;","map":{"version":3,"sources":["C:/Users/Louis/Desktop/demoviewer/client/src/pages/WatchPage.js"],"names":["React","useEffect","useRef","useState","io","Button","Jumbotron","Container","Pagination","json","PlaybackArea","props","drawDots","dotPositions","map","position","x","y","ControlBar","active","setActive","items","handleClick","i","onClick","number","maxRounds","push","Game","playbackState","setPlaybackState","t","currentRound","setCurrentRound","socket","endpoint","useInterval","x0","y0","xg0","yg0","k","game","rounds","player_positions","length","players","newState","xg","yg","console","log","Object","keys","WatchPage","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport io from \"socket.io-client\";\r\nimport { Button, Jumbotron, Container, Pagination} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './WatchPage.css';\r\nimport json from './123.json';\r\n\r\n\r\n\r\nfunction PlaybackArea(props){\r\n    const drawDots = props.dotPositions.map(position=>{\r\n        return <div class =\"dot\" style = {{\"left\": position.x, \"bottom\": position.y}}/>\r\n    });\r\n        \r\n    return(\r\n        <div id=\"map\">\r\n            {drawDots}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ControlBar(props){\r\n    const [active, setActive] = useState(1);\r\n    let items = [];\r\n\r\n    function handleClick(i){\r\n        setActive(i);\r\n        props.onClick(i);\r\n    }\r\n\r\n    // Displaying pagination numbers\r\n    for (let number = 1; number <= props.maxRounds; number++) {\r\n        items.push(\r\n          <Pagination.Item key={number} active={number === active} onClick={()=>handleClick(number)}>\r\n            {number}\r\n          </Pagination.Item>,\r\n        );\r\n      }\r\n\r\n    return(\r\n        <div>\r\n          <Pagination>{items}</Pagination>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction Game(props){\r\n    const [playbackState, setPlaybackState] = useState({t:0, dotPositions:[]});\r\n    const [currentRound, setCurrentRound] = useState(1);\r\n\r\n    useEffect(()=>{\r\n        const socket = io(props.endpoint);\r\n    });\r\n\r\n    \r\n    useInterval(()=>{\r\n        // For position calibration\r\n        const x0 = 535, y0 = -527;   \r\n        const xg0 = -520, yg0 = -984;\r\n        const k = 0.2;\r\n\r\n        if(props.game != null && playbackState.t < props.game.rounds[currentRound].player_positions.length){\r\n            let players = props.game.rounds[currentRound].player_positions[playbackState.t].players;\r\n\r\n            let newState = {\r\n                t: playbackState.t + 1,\r\n                dotPositions: []\r\n            }\r\n            \r\n            for(const i in players){\r\n                if(players[i].position != null){     // checks if player is still alive\r\n                    let xg = players[i].position.x;\r\n                    let yg = players[i].position.y;\r\n                    let x = x0 + (xg-xg0)*k;\r\n                    let y = y0 + (yg-yg0)*k;\r\n\r\n                    newState.dotPositions.push({x,y});\r\n                }\r\n            }\r\n\r\n            setPlaybackState(newState);\r\n        }\r\n        console.log(\"tick\");   \r\n    },5);\r\n\r\n    function handleClick(i){\r\n        setCurrentRound(i);\r\n        setPlaybackState({t:0, dotPositions:[]});\r\n    }\r\n\r\n    return(\r\n        <Jumbotron>\r\n            <PlaybackArea dotPositions= {playbackState.dotPositions}/>\r\n            <ControlBar maxRounds = {Object.keys(props.game.rounds).length} onClick = {handleClick}/>\r\n        </Jumbotron>\r\n    );\r\n   \r\n}\r\n\r\nfunction WatchPage(props){\r\n    return(\r\n        <Container>\r\n            <Game game={json} endpoint={props.endpoint}/>\r\n        </Container>\r\n    )\r\n}\r\n\r\n//~~~~~~~~~~~~~~~~~\r\n\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  }\r\n\r\nexport default WatchPage;\r\n"]},"metadata":{},"sourceType":"module"}